@page "/"

@rendermode InteractiveServer
@using Fireblaze.Components
@using Fireblaze.Components.Login
@inject IJSRuntime JS

@if (!isAuthenticated)
{
    <!-- Se utente NON autenticato, mostriamo il form di login -->
    <LoginForm OnLoginSuccess="HandleLoginSuccess" />
}
else
{
    <!-- Login effettuato -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h4 class="mb-0">Benvenuto <strong>@userEmail</strong></h4>
        <button @onclick="Logout" class="btn btn-outline-danger btn-sm">
            <i class="bi bi-box-arrow-right me-1"></i> Logout
        </button>
    </div>

    <div class="mt-4 border rounded p-3 bg-white">
        <!-- Viewer 3D -->
        <ModelViewer />
    </div>
}

@code {
    // Stato di autenticazione e info utente
    private bool isAuthenticated;
    private string? userEmail;

    // Questo metodo viene chiamato dopo il primo rendering
    // per verificare se utente è già loggato tramite Firebase JS
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Chiamata JS per controllare se l’utente è loggato
            isAuthenticated = await JS.InvokeAsync<bool>("isUserLoggedIn");
            if (isAuthenticated)
            {
                // Se loggato, prendi l’email per mostrare info utente
                userEmail = await JS.InvokeAsync<string>("getUserEmail");
                StateHasChanged(); // Aggiorna UI
            }
        }
    }

    // Logout: chiama JS per disconnettere Firebase
    // e resetta stato per tornare alla pagina di login
    private async Task Logout()
    {
        await JS.InvokeVoidAsync("firebaseLogout");
        isAuthenticated = false;
        userEmail = null;
    }

    // Questo metodo viene invocato dal LoginForm quando il login ha successo
    private async Task HandleLoginSuccess()
    {
        isAuthenticated = true;
        userEmail = await JS.InvokeAsync<string>("getUserEmail");
        StateHasChanged();
    }
}
